#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('nearby:server');
const http = require('http');
const mongoose = require('mongoose');
const { dbURL, seeds } = require("../conf/configuration");
const models = ["store"];

const connectDB = async () => {
    console.log(`Connecting DB`);
    try {
        return await mongoose.connect(dbURL, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
    } catch (error) {
        throw new Error(error.toString())
    }
}

const executeSeeds = async () => {
    if (!seeds || !seeds.length) {
        return;
    }
    console.log(`Executing Seeds`);
    for (const seed of seeds) {
        try {
            if (!seed.model || !models.includes(seed.model.toLowerCase()) || !seed.data || !seed.data.length) {
                return;
            }
            const model = require(`../models/${seed.model.toLowerCase()}`)[seed.model];
            for (const document of seed.data) {
                await model.findOneAndUpdate({ uuid: document.uuid }, document, { upsert: true });
            }
        } catch (error) {
            throw new Error(`${error.toString() || "Cannot execute seeds"}`);
        }
    }
    console.log(`Seeds Executed Successfully`);
    return;
}


connectDB()
    .then(_ => executeSeeds())
    .then(_ => {
        console.log(`DB connection successful`);
        /**
         * Get port from environment and store in Express.
         */
        var port = normalizePort(process.env.PORT || '3000');
        app.set('port', port);
        /**
         * Create HTTP server.
         */
        var server = http.createServer(app);
        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        /**
         * Normalize a port into a number, string, or false.
         */

        function normalizePort(val) {
            var port = parseInt(val, 10);

            if (isNaN(port)) {
                // named pipe
                return val;
            }

            if (port >= 0) {
                // port number
                return port;
            }

            return false;
        }

        /**
         * Event listener for HTTP server "error" event.
         */

        function onError(error) {
            if (error.syscall !== 'listen') {
                throw error;
            }

            var bind = typeof port === 'string' ?
                'Pipe ' + port :
                'Port ' + port;

            // handle specific listen errors with friendly messages
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                    break;
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        }

        /**
         * Event listener for HTTP server "listening" event.
         */

        function onListening() {
            var addr = server.address();
            var bind = typeof addr === 'string' ?
                'pipe ' + addr :
                'port ' + addr.port;
            console.log('Listening on ' + bind);
        }
    })
    .catch(err => {
        console.log(err);
    });
